<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description></description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Jekyll Introduction</title>
				<description>&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what_is_jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what_does_jekyll_do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll_is_not_blogging_software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why_should_i_care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how_jekyll_works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial_setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the_jekyll_application_base_format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt; Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt; This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt; This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt; This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll_configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: (&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content_in_jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts_and_pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working_with_posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt; Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post’s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy “set”. Example:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;title :  Hello World
categories : [lessons, beginner]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working_with_pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt; Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt; Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt; If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt; Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt; Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt; A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates_in_jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt; Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt; There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;subtemplates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another “root” layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using_liquid_for_templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what_is_liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why_do_we_have_to_use_liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid_is_not_programmerfriendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation. What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; My personal stance is to not invest time trying to hack liquid. It’s really unnecessary &lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static_assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_parses_files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt; All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting_files_for_parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;layout: post
category : pages
tags : [how-to, jekyll]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining_layouts_for_posts_and_templates_parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_generates_the_final_static_files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt; Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt; Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next_steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;</description>
				<pubDate>Thu, 29 Dec 2011 00:00:00 -0500</pubDate>
				<link>/lessons/2011/12/29/jekyll-introduction</link>
				<guid isPermaLink="true">/lessons/2011/12/29/jekyll-introduction</guid>
			</item>
		
			<item>
				<title>Neat Color-Coded `svn status` Wrapper Script</title>
				<description>&lt;p&gt;A few days ago, I found a handy script online that colorized the output of SVN status. It worked pretty well, but needed a little polish and a couple of tweaks to make it use more common Python idioms. Also, I fixed ANSI word-wrapping issues, created a configurable tab expansion feature (for better code alignment), added the ‘colorizedSubcommands’ sequence so that only applicable commands get colorized, and fixed subprocess calls so that piping through less will work (for example, try &lt;tt&gt;svn-color diff | less -r&lt;/tt&gt; to see colorized diff output).&lt;/p&gt;

&lt;p&gt;I hope you find my modifications useful. You can modify the colors used by looking up the ANSI color codes for your preferred color scheme and editing the ‘statusColors’ dictionary. Here’s a useful reference for ANSI color values:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.ibm.com/developerworks/linux/library/l-tip-prompt/colortable.gif'&gt;http://www.ibm.com/developerworks/linux/library/l-tip-prompt/colortable.gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i’ve posted the code on &lt;a href='http://snipplr.com'&gt;snipplr&lt;/a&gt;, and it’s also posted below after the break.&lt;/p&gt;
&lt;!--break--&gt;&lt;div class='snipplr_embed' id='snipplr_embed_28748'&gt;&lt;a href='http://snipplr.com/view/28748/colorcoded-svn-status-v3/'&gt;code snippet - color-coded `svn status` (v3)&lt;/a&gt; on snipplr&lt;/div&gt;&lt;script src='http://snipplr.com/js/embed.js' type='text/javascript'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;&lt;script src='http://snipplr.com/json/28748' type='text/javascript'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;</description>
				<pubDate>Mon, 22 Feb 2010 00:00:00 -0500</pubDate>
				<link>/y29kaw5n/chl0ag9u/dw5pea==/ymfzaa==/c3zu/2010/02/22/neat-color-coded-svn-status-wrapper-script</link>
				<guid isPermaLink="true">/y29kaw5n/chl0ag9u/dw5pea==/ymfzaa==/c3zu/2010/02/22/neat-color-coded-svn-status-wrapper-script</guid>
			</item>
		
			<item>
				<title>modu version 1.0 released!!!</title>
				<description>&lt;p&gt;After two years of continual development, documentation, and production use, I've arbitrarily decided to tag modu with a version 1.0, as well as make a formal release.&lt;/p&gt;&lt;p&gt;modu is released under the &lt;a href='http://modu.bubblehouse.org/trac/browser/trunk/LICENSE'&gt;MIT&lt;/a&gt; license. For installation instructions, see &lt;a href='http://modu.bubblehouse.org/trac/wiki/Installation'&gt;Installation&lt;/a&gt; or the included &lt;a href='http://modu.bubblehouse.org/trac/browser/tags/modu-1.0.2/INSTALL'&gt;INSTALL&lt;/a&gt; file.&lt;/p&gt;&lt;div&gt;
&lt;h4&gt;Tar package&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt;: &lt;a href='http://modu.bubblehouse.org/releases/modu-1.0.2.tar.gz#egg=modu-1.0.2'&gt;modu-1.0.2.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;sub&gt;&lt;tt&gt;md5sum: 33242ce8c2a3c6292aca46ee563e431b &lt;/tt&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;/div&gt;&lt;!--break--&gt;&lt;p&gt;A great deal of changes have occurred over the last few weeks as I've removed tons of cruft and dependencies from the main codebase, and in particular completed the transition to setuptools-based installation, and the setuptools Resource API to handle assets more effectively. Additionally, the Cheetah integration now caches templates in memory, which should allow for use of template #cache directives, although I haven't really tried this yet.&lt;/p&gt;&lt;h4&gt;Dependencies:&lt;/h4&gt;&lt;ul&gt;
    &lt;li&gt;Python 2.5&lt;/li&gt;
    &lt;li&gt;Twisted 9&lt;/li&gt;
    &lt;li&gt;Cheetah 2.4.1&lt;/li&gt;
    &lt;li&gt;MySQLdb 1.2.3c1&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;small&gt;There is currently experimental support included for CherryTemplates and ZPTPages template engines, as well as the PostgreSQL and SQLite databases.&lt;/small&gt;&lt;/p&gt;&lt;p&gt;Latest Stable Release 1.0.2&lt;/p&gt;&lt;p&gt;1.0.2 is a new stable maintenance release, released on February 07, 2010 at 11.18PM. It contains a number of bug fixes and minor enhancements. See the &lt;a class='source' href='/trac/browser/tags/modu-1.0.0/ChangeLog'&gt;ChangeLog&lt;/a&gt;  for details.&lt;/p&gt;&lt;div&gt;
&lt;h4&gt;Tar package&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt;: 			&lt;a href='http://modu.bubblehouse.org/releases/modu-1.0.2.tar.gz#egg=modu-1.0.2'&gt;modu-1.0.2.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;sub&gt;&lt;tt&gt;md5sum: 33242ce8c2a3c6292aca46ee563e431b &lt;/tt&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h4&gt;Binary Distribution&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Automatically install and compile modu and related dependencies:
    &lt;pre&gt;
# easy_install modu&lt;/pre&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;h4&gt;SVN Tag&lt;/h4&gt;&lt;p&gt;To check out a snapshot of the source code from SVN HEAD, use the following incantation:&lt;/p&gt;&lt;pre&gt;
svn co http://svn.bubblehouse.org/modu/tags/modu-1.0.2&lt;/pre&gt;</description>
				<pubDate>Tue, 09 Feb 2010 00:00:00 -0500</pubDate>
				<link>/y29kaw5n/chjvz3jhbw1pbmc=/dhdpc3rlza==/bw9kdq==/c29mdhdhcmu=/cmvszwfzzq==/2010/02/09/modu-version-1-0-released</link>
				<guid isPermaLink="true">/y29kaw5n/chjvz3jhbw1pbmc=/dhdpc3rlza==/bw9kdq==/c29mdhdhcmu=/cmvszwfzzq==/2010/02/09/modu-version-1-0-released</guid>
			</item>
		
			<item>
				<title>MySQLs mangled syntax handling and INNER JOINs</title>
				<description>&lt;p&gt;As my DBA skills have progressed over the years, I’m always impressed and upset to see the extent to which MySQL has allowed me to use terrible syntax generally not accepted by standards-compliant SQL servers.&lt;/p&gt;

&lt;p&gt;A recent one really blew me away, because it exposed a lack of understanding on my part about how to understand the syntax of JOIN commands.&lt;/p&gt;

&lt;p&gt;This is how I always built nested JOIN queries. The premise is that semantically you are always selecting from a single table; the use of the INNER JOIN statement is treated like a function that returns a compound table.&lt;/p&gt;
&lt;div style='text-align:left;color:#ffffff; background-color:#000000; border:solid black 1px; padding:0.5em 1em 0.5em 1em; overflow:auto;font-size:small; font-family:monospace; '&gt;&lt;span style='color:#dfb098;'&gt;SELECT&lt;/span&gt; r.name &lt;span style='color:#dfb098;'&gt;AS&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;role&lt;/span&gt;, p.name &lt;span style='color:#dfb098;'&gt;AS&lt;/span&gt; permission&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;FROM&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;role&lt;/span&gt; r&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;INNER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;JOIN&lt;/span&gt; (role_permission rp&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;INNER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;JOIN&lt;/span&gt; permission p &lt;span style='color:#dfb098;'&gt;ON&lt;/span&gt; (rp.permission_id = p.&lt;span style='color:#dfb098;'&gt;id&lt;/span&gt;))&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;ON&lt;/span&gt; (rp.role_id = r.&lt;span style='color:#dfb098;'&gt;id&lt;/span&gt;)&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;ORDER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;BY&lt;/span&gt; r.name, p.name&lt;br /&gt;
&lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;However, when trying to run this same snippet against an SQLite3 database, I would continue to get a &lt;span class='error'&gt;no such column: p.name&lt;/span&gt; error. After some research, I found the preferable way to do nested joins is much simpler, if less semantically pleasing:&lt;/p&gt;
&lt;div style='text-align:left;color:#ffffff; background-color:#000000; border:solid black 1px; padding:0.5em 1em 0.5em 1em; overflow:auto;font-size:small; font-family:monospace; '&gt;&lt;span style='color:#dfb098;'&gt;SELECT&lt;/span&gt; r.name &lt;span style='color:#dfb098;'&gt;AS&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;role&lt;/span&gt;, p.name &lt;span style='color:#dfb098;'&gt;AS&lt;/span&gt; permission&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;FROM&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;role&lt;/span&gt; r&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;INNER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;JOIN&lt;/span&gt; role_permission rp &lt;span style='color:#dfb098;'&gt;ON&lt;/span&gt; rp.role_id = r.&lt;span style='color:#dfb098;'&gt;id&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;INNER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;JOIN&lt;/span&gt; permission p &lt;span style='color:#dfb098;'&gt;ON&lt;/span&gt; rp.permission_id = p.&lt;span style='color:#dfb098;'&gt;id&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style='color:#dfb098;'&gt;ORDER&lt;/span&gt; &lt;span style='color:#dfb098;'&gt;BY&lt;/span&gt; r.name, p.name&lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;This works for me properly in both SQLite and MySQL. I’m curious what it was that made me ever start writing nested JOINs in the former method; it was fairly error-prone due to missing parenthesis, etc.&lt;/p&gt;</description>
				<pubDate>Tue, 02 Feb 2010 00:00:00 -0500</pubDate>
				<link>/cmfudhm=/y29kaw5n/bxlzcww=/chjvz3jhbw1pbmc=/c3fsaxrl/2010/02/02/mysqls-mangled-syntax-handling-and-inner-joins</link>
				<guid isPermaLink="true">/cmfudhm=/y29kaw5n/bxlzcww=/chjvz3jhbw1pbmc=/c3fsaxrl/2010/02/02/mysqls-mangled-syntax-handling-and-inner-joins</guid>
			</item>
		
			<item>
				<title>bass notes for seaflux tunes</title>
				<description>&lt;h1 id=&quot;bass_notes&quot;&gt;bass notes&lt;/h1&gt;

&lt;h2 id=&quot;underworld&quot;&gt;underworld&lt;/h2&gt;

&lt;p&gt;opening riff: key of bbm, repeats 3x guitar alone, then distorted w/drums&amp;amp;bass, then with octave verse: bbm, a (4x) chorus: power chords; bb, gb, f (4x)&lt;/p&gt;

&lt;p&gt;repeat verse and chorus, pause after 2nd chorus&lt;/p&gt;

&lt;p&gt;guitar plays outro riff twice, then drums&amp;amp;bass join in&lt;/p&gt;

&lt;p&gt;outro riff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g---------------------------------------------------
d-----------7-6---8-7-6-------------------7-6---8---
a-----6-7-8-----7-------7-8-6-------6-7-8-----7-----
e---7-------------------------7---7-----------------&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;breakbeat jam over outro riff starts quiet, gets louder and more intense.&lt;/p&gt;

&lt;p&gt;4 repeats of outro riff signals the end&lt;/p&gt;

&lt;h2 id=&quot;interlude&quot;&gt;interlude&lt;/h2&gt;

&lt;p&gt;hits: c g eb c verse: gm bb c eb chorus: power chords; c eb bb g&lt;/p&gt;

&lt;p&gt;hits verse (2x, instrumental)&lt;/p&gt;

&lt;p&gt;hits verse (2x, w/lyrics) verse (1x, instrumental) verse (2x, w/lyrics) chorus (2x)&lt;/p&gt;

&lt;p&gt;hits verse (2x, w/lyrics) verse (1x, instrumental) verse (2x, w/lyrics) chorus (2x)&lt;/p&gt;

&lt;p&gt;sustained g power chord for one bar, then outro&lt;/p&gt;

&lt;p&gt;outro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a section                      3x
g-||---------------------------||-----------------
d-||*-------------3-----------*||-----------------
a-||*-------3-4-5---5-4-3-----*||-----------------
e-||--3-5-6---------------6-5--||-3-5-6-3-5-6-3---

b section                                  4x
g-||---------------------------------------||-----
d-||*-------------------------------------*||-----
a-||*-------------3---5-6-3---3-5-3-------*||-----
e-||--3-5-6-3-5-6-----------6-------6-5-4--||-3---

c section (repeat until you don't ;-)
g-----------||---------------||
d-----------||*-------------*||
a-----------||*-----5-7-5---*||
e-----0-----||--5-7-------7--||&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jam forever, no specific ending, maybe will jam into another tune.&lt;/p&gt;</description>
				<pubDate>Wed, 13 Jan 2010 00:00:00 -0500</pubDate>
				<link>/2010/01/13/bass-notes-for-seaflux-tunes</link>
				<guid isPermaLink="true">/2010/01/13/bass-notes-for-seaflux-tunes</guid>
			</item>
		
			<item>
				<title>Compiling PHP 5.2.10 on Mac OS X 10.5.7</title>
				<description>&lt;p&gt;&lt;code&gt;
MACOSX_DEPLOYMENT_TARGET=10.5 CFLAGS=&amp;quot;-arch ppc -g -Os -pipe -no-cpp-precomp&amp;quot; CCFLAGS=&amp;quot;-arch ppc -g -Os -pipe&amp;quot; CXXFLAGS=&amp;quot;-arch ppc -g -Os -pipe&amp;quot; LDFLAGS=&amp;quot;-arch ppc -bind_at_load&amp;quot; ./configure –prefix=/usr –mandir=/usr/share/man –infodir=/usr/share/info –with-apxs2=/usr/sbin/apxs –with-ldap=/usr –with-kerberos=/usr –enable-cli –with-zlib-dir=/usr –enable-exif –enable-mbstring –enable-mbregex –enable-sockets –with-iodbc=/usr –with-config-file-path=/etc –sysconfdir=/private/etc –with-iconv=shared,/opt/local –with-openssl=shared,/opt/local –with-xmlrpc –with-xsl=/usr –with-gd –with-mysqli=/usr/local/mysql/bin/mysql_config –with-png-dir=/opt/local
&lt;/code&gt;&lt;/p&gt;</description>
				<pubDate>Tue, 30 Jun 2009 00:00:00 -0400</pubDate>
				<link>/2009/06/30/compiling-php-5-2-10-on-mac-os-x-10-5-7</link>
				<guid isPermaLink="true">/2009/06/30/compiling-php-5-2-10-on-mac-os-x-10-5-7</guid>
			</item>
		
			<item>
				<title>Camp MMW Rocked My Face Off</title>
				<description>&lt;p&gt;It’s been two days since I returned from Camp MMW, and I still feel like I haven’t returned to reality yet. The experience was kind of like joining Fight Club — everything at work has had the volume turned down.&lt;/p&gt;

&lt;p&gt;When I was first accepted, I wasn’t really sure I was going to go. I had been amassing a decent-sized pile of debt, and I wasn’t sure if it would be wise to get that much deeper, but conversations with friends and family convinced me that this was a once-in-a-lifetime opportunity, and besides, “when was the last time you took a vacation?”&lt;/p&gt;

&lt;p&gt;For me, the days leading up to camp had been filled with a surprisingly large amount of musical activity; rehearsals with two bands, various excellent shows in the city, and of course my trip to the Rothbury Festival in Michigan. Seeing MMW there really got me pumped for camp, and I could really tell they were really on fire this summer. All this excellent music had me well-primed for the events to come…&lt;/p&gt;

&lt;p&gt;When the day finally came, I packed my stuff (including far too many guitars and effects), and made a short jaunt up to the Catskills. The drive was beautiful, of course, but I had some anxiety about the trip. I had practically no idea what to expect; although we’d been given a tentative schedule, I had endless questions about how things would work. However, I made a promise to myself not to let my usual social anxiety interfere with getting the most out of this experience. I was determined to talk to as many people as possible, and planned to stick myself into any jam situation I could, even if I ended up making an ass out of myself.&lt;/p&gt;

&lt;h2 id=&quot;arriving_at_camp&quot;&gt;Arriving at Camp&lt;/h2&gt;

&lt;p&gt;When I arrived, I could immediately feel a sort of energy in the air. I could tell that all the campers were feeling the same way I was; a bit nervous, but also thrilled and determined to meet everyone — and get down to some musical business. I met my roommates Pravin and Jamie and we immediately got along, so one weight had already been lifted off my shoulders.&lt;/p&gt;

&lt;p&gt;By this time there was already music drifting from afar, so I followed my ears to the Barn where a jam session had already coalesced. I stuck to my guns and took the first opportunity to jump up there and groove out with the other campers. Camp had officially begun!&lt;/p&gt;

&lt;p&gt;The opening meet and greet and subsequent dinner gave us all a chance to congregate and learn about each other, where we were all from, and the influences that brought us to camp. Everyone seemed to be in a state of disbelief, all the while being absolutely pumped to be there. Even though we all came from different places and musical backgrounds, the connecting thread of a love of MMW gave us all some common ground to stand on.&lt;/p&gt;

&lt;h2 id=&quot;the_band&quot;&gt;The Band&lt;/h2&gt;

&lt;p&gt;Before camp, I had seen MMW play maybe 8-9 times, and had amassed a collection of bootlegged recordings that I always made sure got rotated into my daily iPod shuffle. Still, I knew practically nothing about them, other than the usual stuff you can glean from Wikipedia or Allmusic. In fact, I didn’t even know what John Medeski or Chris Wood’s voices even sounded like, and knew nothing about Billy except that he was “Billy Martin, I play the drums”.&lt;/p&gt;

&lt;p&gt;The opening MMW master class immediately gave us an idea of the offstage chemistry of the group. It seems so clichéd to say it, but you instantly knew that although these guys were clearly brilliant musicians, they were still “regular guys.” Obviously, you can’t really get to know someone in five days, but I feel like I now have a bit of an understanding of the character types that make up MMW.&lt;/p&gt;

&lt;p&gt;First of all, John Medeski is like a mad scientist. Not the evil megalomaniac kind, but more of a “Absent-Minded Professor” type. Although there was endless information that he wanted to convey, he did it all in a manner that was immediately accessible to me. I was most pleased to learn what would become a recurring theme over the week, that although he had an amazing grasp of theory and a technical mastery of his instrument, that wasn’t what was most important to him, but simply a tool to help him reach improvisational heights.&lt;/p&gt;

&lt;p&gt;Chris Wood had a similar skill at conveying complex ideas, but it was contained in a different personality. The best way to describe it is like an older student helping out a younger one. I remember when I first was learning guitar, and meeting older guys who had been playing much longer than I had, but who were eager to help me out with tips and techniques to get the most out of my playing. Chris’ style was much like this, although combined with a sort of professorial style that made advanced concepts seem really clear and accessible.&lt;/p&gt;

&lt;p&gt;Billy Martin…hmm…well, I’m going to quote Frank Zappa when talking about Pierre Boulez, and say that Billy is “serious as cancer.” Okay, I know that sounds extreme, but over the weekend I was just struck by the energy that Billy exuded; it wasn’t that I was intimidated by him, &lt;em&gt;per se&lt;/em&gt;, but any time I interacted with him I felt like I wanted to prove that I was just as serious about music as he was. ;-) I appreciated his candor and his vast knowledge of rhythm and world influences, but was also pleased to discover that he wasn’t really into reading or writing western notation.&lt;/p&gt;

&lt;h2 id=&quot;the_campers&quot;&gt;The Campers&lt;/h2&gt;

&lt;p&gt;Possibly one of the most shocking things about this whole experience was how completely awesome all the other campers were. Perhaps it was because we were all so thankful to be there, but everyone I met was totally cool and unique in various ways.&lt;/p&gt;

&lt;p&gt;There was a great mix of instruments, lots of drummers and bassists, and a reasonable number of guitar and keys players. Due to sheer numbers, we all had to be mindful of giving others time to play and not monopolizing jam sessions, which were basically self-governed. Pretty much everybody was good about this, and those that weren’t were really just so excited to be there, I could hardly get mad at them.&lt;/p&gt;

&lt;p&gt;I got a little inside info about how the sleeping arrangements were figured out. The ‘official’ word was that they were most concerned about the younger campers getting wild, so they put them all with some of the older campers in hopes of “keeping them in check.” However, considering that they put most of the 22-35-year-olds in the lodge that was across the street, secluded from the main camp area, suggests that they might have been more interested in keeping us from corrupting the nation’s youth. It was probably a wise decision. ;-)&lt;/p&gt;

&lt;h2 id=&quot;master_classes&quot;&gt;Master Classes&lt;/h2&gt;

&lt;p&gt;Every day one of the band members or guest speakers would present a master class to all the campers, going into detail about their influences and ideas about music, different ways they would practice, songwriting techniques, and general life lessons for musicians.&lt;/p&gt;

&lt;p&gt;John’s was the first one (apart from the full band master class on opening day), and was focused largely on the metaphysical aspects of music, with a separate emphasis on how musical ideas can be found in practically everything.&lt;/p&gt;

&lt;p&gt;Billy was up next, and got really into some of his world influences. It was interesting to compare his teaching style to John’s; although with Medeski I could pretty easily take notes just from what he was saying, Billy’s style was a lot more informal. I realized that I just needed to listen and try to derive my own “knowledge nuggets” from what he was discussing.&lt;/p&gt;

&lt;p&gt;Chris Wood’s master class was probably my favorite. He began with &lt;a href=&quot;http://www.ted.com/index.php/talks/jill_bolte_taylor_s_powerful_stroke_of_insight.html&quot;&gt;an amazing video&lt;/a&gt; of Dr. Jill Taylor’s experiences during a stroke in the left side of her brain. It was a great introduction to a talk about right-left brain functionality and how this affects you as a player of improvised music.&lt;/p&gt;

&lt;p&gt;By the time we arrived, there had been a schedule change, and there was to be a “special guest” giving a master class over at the performance space. Rumors circulated all week about who it might be, but by Saturday afternoon we had our answer when John Scofield got in line for lunch.&lt;/p&gt;

&lt;p&gt;Unfortunately Sco wasn’t able to stay for the whole day, so they merged his master class with a MSMW performance. Hearing them all jam together and open up with “A Go-Go” was an amazing experience, though, and was making the face cramping I had (from excessive smiling) that much worse.&lt;/p&gt;

&lt;p&gt;Sco took a few minutes in the middle of their performance to take questions from the audience, but I think audience and band alike just wanted more jamming. They brought it back with a killer Little Walter, and finished up with a Miles Behind.&lt;/p&gt;

&lt;h2 id=&quot;ensembles&quot;&gt;Ensembles&lt;/h2&gt;

&lt;p&gt;One of the coolest aspects of camp was the ensemble groups. We were split into three groups, and each would have a sort of rehearsal with each of the band members over three days. Although there was still a lot of us in each group, this gave us all a chance to play, and also made things more productive, since each band member acted as a conductor to keep things fresh and interesting.&lt;/p&gt;

&lt;p&gt;My first ensemble meeting was with John Medeski. This was my first exposure to Billy’s ‘riddims’; after being taught these clave rhythms through group clapping, we all had a chance to go onstage and play them on our own instruments. This featured one of the more significant highlights of the week for me, when I (and about five other students) got to jam along on these riddims with John wailing away on the Wurlitzer.&lt;/p&gt;

&lt;p&gt;The next ensemble I had was with Chris Wood. In this case we were split into three groups, and while two groups would go off with Chris to work on more riddim exercises, the rest were left with 20 minutes to create an arrangement of a field recording/spiritual, illustrating how you can find compositional ideas in many different places. Our group was actually the last to go up, so we had the fortune of learning from everyone else’s mistakes, and got to use the remaining time to talk with Chris about arranging techniques.&lt;/p&gt;

&lt;p&gt;Billy’s ensemble was more freeform than the others, which was a nice contrast. He built small ensembles out of the players in the class, and conducted them through various free playing exercises. There was a focus on playing ‘gestures’, a concept first discussed by Steve Bernstein during his master class, and which became another recurring meme throughout the week. Our goal was to play a small cell of music or sound that we felt represented us each as players.&lt;/p&gt;

&lt;p&gt;Another highlight for me was during Billy’s ensemble where we got to play a new MMW composition that he had created to be released on their next album. Camper Larry Legend was on the ball, and &lt;a href=&quot;http://vids.myspace.com/index.cfm?fuseaction=vids.individual&amp;amp;videoid=40547289&quot;&gt;got a great video of us working on this tune&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;/h2&gt;

&lt;p&gt;The workshops were a bit more hands-on than the master classes, and also happened simultaneously, so you had to pick one of three or four different ones to go see. The first one I attended was Marc Ribot’s “Extended Techniques for Guitar and Alternate Improvisation.”&lt;/p&gt;

&lt;p&gt;I thought I was familiar with Marc’s work beforehand; I knew him as MMW’s ‘preferred’ guitarist (I think Sco is evaluated separately), but I had little to no understanding of the level of his expertise. In addition to being a respectable classical or jazz player, Marc’s blues chops are amazing, and his devotion to experimentation and “avant rock” is pretty much unparalleled. I thoroughly enjoyed this class, which featured a six- or seven- guitar choir conducted by Marc using hand signals he developed for use with Modified Cobra.&lt;/p&gt;

&lt;p&gt;Next up for me was Medeski’s workshop, “The ‘Ins’ of ‘Taking It Out’.” John talked about an approach to extended harmony that I hadn’t encountered before. It ran along with one of the themes of the camp, which was the importance of learning theoretical concepts in a way that allows you to use them naturally, without thinking. One approach focused on learning the sounds of the more ‘out’ chord combinations by stacking triads against each scale degree, while another gave us a foundational understanding of how the ‘rules of improvisational harmony’ (the ones that say you “always” play a Dorian scale over a minor 7th chord) were created.&lt;/p&gt;

&lt;p&gt;It was hard to pick between Billy and Chris’ workshops for the last one, but I went with the second of Chris’ “Making Music On a Fret Board” classes. Here I learned a number of new exercises to help improve my fretboard fluidity as well as improve my note reading (an area in which I continue to be sorely lacking). Since this class my practice sessions have been far more productive, but I was glad to hear again the emphasis on forgetting that stuff when you’re actually in performance mode.&lt;/p&gt;

&lt;h2 id=&quot;jam_sessions&quot;&gt;Jam Sessions&lt;/h2&gt;

&lt;p&gt;In many ways, the jam sessions were my favorite part of camp. It seemed like a lot of the players there were either disinterested or intimidated by the jam session environment. I heard some people say they didn’t like the “competitive” nature of the sessions, which was weird to me. These sessions felt like a bunch of close friends jamming compared to the cut-throat attitudes I’ve encountered in other scenarios. Remind me to tell you a story sometime about friends of mine getting berated onstage at this jazz club in NYC called “Smoke”.&lt;/p&gt;

&lt;p&gt;Anyways, at first, it was a widely discussed problem that most of the jams were leaning towards one-chord funk and blues jams. It shouldn’t have been surprising; since there were so many players, most jamming situations involved a large number of musicians. This is not an easy thing to deal with, and it took awhile for this stuff to settle down.&lt;/p&gt;

&lt;p&gt;As I mentioned previously, all the campers tried to be good about giving other people the chance to play. During these first few jams, however, it was clear that you had to be reasonably assertive, and willing to walk right up ask to hop on for awhile. This might have been part of the problem for a lot of people; no amount of passive-aggression was going to get you a chance to play. Of course, as we got to know each other, even this lightened up, and people were calling out for anyone who wanted to take over.&lt;/p&gt;

&lt;p&gt;After a couple days, things had really come along. Far more exploration was happening, and people were really being conscious of how much space they were taking up in the mix. My only criticism in the end was that since everyone wanted to play so bad, and usually had to wait for awhile to get a chance, no one had any interest in trying out a new set of changes, or having any kind of pre-jam “planning” discussion.&lt;/p&gt;

&lt;p&gt;Still, it was a very educational experience for me. For one thing, when I play improvised music with people, I always seem to end up being the leader. I’ve theorized several reasons for this, from basic personality types to the fact that I play guitar (which as a soprano instrument really just ends up cutting through everything). Still, at Camp MMW, getting the group to follow you was a strictly meritocratic process, since they weren’t going to take up that groove you hinted at or accent that rhythm you played unless they really liked what you were doing.&lt;/p&gt;

&lt;p&gt;At various points, people would try to take on the role of conductor. This was a good idea, but a few conductors didn’t really understand the nature of what they were trying to do. A popular comment was that doing this was a lot like “herding cats”; it was best not to expect miracles.&lt;/p&gt;

&lt;h2 id=&quot;performances&quot;&gt;Performances&lt;/h2&gt;

&lt;p&gt;The highlight of nearly every day, however, was the nightly performance. Now, I’ve seen MMW play some small venues, but the performance space at camp can only be described as a ‘cabin’. The stage was so small, John couldn’t even have his piano there, but they raged it up every night without fail.&lt;/p&gt;

&lt;p&gt;There were some special sessions; one night started with Steve Bernstein putting together a huge ensemble of students. This was pretty good, but I was glad to see Steve and MMW take the stage for a closing set. After a whole day of jam sessions and thinking about jamming, my standards had been raised pretty high, and only MMW could cap the day off properly ;-)&lt;/p&gt;

&lt;p&gt;Marc Ribot’s set with MMW was probably my favorite (if you believe it’s possible to pick a ‘favorite’ out of four nights of mind-blowing performances). The thing that’s craziest about hearing him play with the band is that he fits in so seamlessly. When he wasn’t intentionally standing out (like during a solo in a raging blues number they did), and assuming you weren’t watching closely, it would sometimes be hard to differentiate between his lines and some of Medeski’s.&lt;/p&gt;

&lt;p&gt;The last night was billed in the schedule as “Students featured into MMW performance.” Everyone was wondering how this was going to work out — the band had been so good at not ‘playing favorites’ that it seemed impossible for them to just select a few people. In the end, things were set up like a larger version of Billy’s ensemble, where the band members conducted the group through a hour-and-a-half long collaboration. People who wanted to play just sat at the front, and would be rotated in and out by the band.&lt;/p&gt;

&lt;p&gt;I had come prepared to play, but in the end I screwed myself by trying to be too clever. MMW had pretty much told us that the focus was going to be on the students for this show, but that they would “try to interact” with us when possible. I wanted to listen for a bit, and see how things were working up there, but I also figured that my best bet for getting to jam with one of them on stage was to wait a little while, and try to get on towards the end.&lt;/p&gt;

&lt;p&gt;Eventually I made my way to the front, and after a few minutes, John called me up. I walked up there, but by that time, something had changed, and he said something to me that I couldn’t hear, but it seemed like they weren’t ready yet. I sat down to wait it out, and little by little the players were replaced by the members of the band, except for two guitar players (who, of course, had no one to replace them).&lt;/p&gt;

&lt;p&gt;I was sure they were going to nod these guys off any minute now, so I figured it would be inappropriate to tap in (one of the guys was barely playing at all, and I could have snuck up to him easily). I kept waiting, but before I realized it, two other guitar players had tapped in, and joined the band in one last raging blues number. I had missed my chance.&lt;/p&gt;

&lt;p&gt;Still, the replacements were pretty great, and after they had brought the blues jam to a close, MMW took the stage for one last trio performance, and brought the house down.&lt;/p&gt;

&lt;p&gt;Incidentally, up until this point people had been pretty restrained during the performances, with everybody sitting in a bunch of folding chairs in front of the stage, and those of us freaks who wanted to dance towards the back. This time, however, the freaks took over, and pulled people up out of their seats, pushed the chairs out of the way, and everybody started to &lt;em&gt;get down&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It still wasn’t over, of course, and we closed the night out with a number of great jams at the cafe, and a certain amount of &lt;em&gt;responsible debauchery&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the_aftermath&quot;&gt;The Aftermath&lt;/h2&gt;

&lt;p&gt;The last day of camp was pretty anti-climactic. We all got to sleep in a little more, and the morning was filled with the swapping of contact info, and plans of what to do with ourselves when we got home, now that we’d become “enlightened.”&lt;/p&gt;

&lt;p&gt;They always say about vacations, that you should be excited to leave and glad to get home. This was definitely the deal for me; after a week of high-intensity musical immersion, I needed out. I was glad that I was one of the fortunate ones who had a fairly quick drive home; as soon as I arrived, I called up the band and arranged a rehearsal.&lt;/p&gt;

&lt;p&gt;Playing with the “old crew” was exactly what I needed to bring me back down to earth (or somewhere close to it), and I started to be able to process all the stuff that had happened. There was so much to think about, even to this day I’m still having epiphanies about things we talked about, or observations I made.&lt;/p&gt;

&lt;p&gt;I felt like while a learned a huge amount at Camp MMW, the biggest impact it made on me was showing me that I was on the right track with regards to improvisation. At so many different times I would hear something that I had been thinking about, or discussing with the band, and I would have my original thoughts validated and clarified.&lt;/p&gt;

&lt;p&gt;Sometimes when I see really amazing musicians, I go home with this feeling of “why do I bother even playing at all?”, and want to pack my guitar away and give up. This time, however, despite getting an even clearer picture of how amazing MMW is, I went home thinking “okay, I understand what I have to do. it’s hard, but at least I &lt;em&gt;understand&lt;/em&gt; it.”&lt;/p&gt;

&lt;p&gt;Now let’s see how long this feeling lasts.&lt;/p&gt;</description>
				<pubDate>Tue, 12 Aug 2008 00:00:00 -0400</pubDate>
				<link>/bxvzawm=/z3vpdgfy/y2ftcg1tdw==/2008/08/12/camp-mmw-rocked-my-face-off</link>
				<guid isPermaLink="true">/bxvzawm=/z3vpdgfy/y2ftcg1tdw==/2008/08/12/camp-mmw-rocked-my-face-off</guid>
			</item>
		
			<item>
				<title>japh</title>
				<description>&lt;pre&gt;
$Z=sub{for($Z=0;$Z&amp;lt;@_;$Z++){$z=oct(&amp;quot;$_[$Z++]&amp;quot;).&amp;quot;$_[$Z++]&amp;quot;.$_[$Z];for($W=0;
$W&amp;lt;length($z);$W++){($n,$N)=split(m--,substr($z,$W,2));$W++;$X=int($n);
push(@V,split(m++,${N}x${X}));}}for($W=0;$W&amp;lt;@V/3;$W++){$_=chr(int($V[$W].
$V[$W+055].$V[$W+0x5A]));$_=~tr,a-zA-Z,n-za-mN-ZA-M,;print $_;}};$Z-&amp;gt;(10016,0x460,
4120,6046,0x1810,3110,15706,0x83e,1130,2437,0xb5e,2110,2447,0x456,1213,6050,0x456,
3411,2613,0x840,1321,1763,0x7db,1910,2151,0x584,1312,1771,0x715,1714,2130,0x77a,
2112,3256,0x4ba,1411,7032,0x5ef,1718,2142,0x6af,1812,2442,0x6b0,1417);
&lt;/pre&gt;</description>
				<pubDate>Mon, 17 Mar 2008 00:00:00 -0400</pubDate>
				<link>/y29kaw5n/cgvyba==/amfwaa==/2008/03/17/japh</link>
				<guid isPermaLink="true">/y29kaw5n/cgvyba==/amfwaa==/2008/03/17/japh</guid>
			</item>
		
			<item>
				<title>64-bit MySQL and DBD::mysql Woes</title>
				<description>&lt;p&gt;I was attempting to install DBD::mysql today, and I ran into a fiendishly difficult problem.&lt;/p&gt;

&lt;p&gt;I’ve installed the mysql drivers for Perl countless times, but this time for some reason, I was getting the following error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ool-4577f347:~/.cpan/build/DBD-mysql-4.004 root# make cc -c -I/Library/Perl/5.8.6/darwin-thread-multi-2level/auto/DBI -I/usr/local/mysql/include -Os -arch ppc64 -fno-common -DDBD_MYSQL_INSERT_ID_IS_GOOD -g -g -pipe -fno-common -DPERL_DARWIN -no-cpp-precomp -fno-strict-aliasing -I/usr/local/include -Os -DVERSION=\&amp;quot;4.004\&amp;quot; -DXS_VERSION=\&amp;quot;4.004\&amp;quot; &amp;quot;-I/System/Library/Perl/5.8.6/darwin-thread-multi-2level/CORE&amp;quot; dbdimp.c dbdimp.c: In function ‘mysql_dr_connect’: dbdimp.c:1565: error: ‘ulong’ undeclared (first use in this function) dbdimp.c:1565: error: (Each undeclared identifier is reported only once dbdimp.c:1565: error: for each function it appears in.) dbdimp.c:1565: error: parse error before numeric constant dbdimp.c:1567: error: parse error before numeric constant dbdimp.c:1681: error: parse error before numeric constant make: *** dbdimp.o Error 1&lt;/code&gt;&lt;/p&gt;
&lt;!--break--&gt;
&lt;p&gt;I found a tip over at &lt;a href='http://fuel.stuffo.info/blog/archives/11'&gt;http://fuel.stuffo.info/blog/archives/11&lt;/a&gt;, and added a line to /usr/local/mysql/include/mysql_com.h:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;typedef unsigned long ulong;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once I did that, I got through that error, but I had problems at the linking stage, getting an error like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/ld: truncated or malformed archive: /usr/local/mysql/lib/libmysqlclient.a (ranlib structures in table of contents extends past the end of the table of contents, can’t load from it)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As it turns out, this is a problem with the 64-bit version of MySQL 5.0 (thanks to &lt;a href='http://devel.webwork.rochester.edu/twiki/bin/view/Webwork/TigerInstall'&gt;http://devel.webwork.rochester.edu/twiki/bin/view/Webwork/TigerInstall&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After I reinstalled &lt;a href='http://dev.mysql.com/downloads/mysql/5.0.html'&gt;32-bit MySQL&lt;/a&gt;, the DBD::mysql package compiled and installed without a problem. In fact, I didn’t even have to add that line to &lt;tt&gt;mysql_com.h&lt;/tt&gt;. However, all was not well, because for some reason, whenever code tried to &lt;strong&gt;use&lt;/strong&gt; this module, (either ‘make test’ or actual code), I got the cryptic error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install_driver(mysql) failed: Can’t load ‘/Users/phil/.cpan/build/DBD-mysql-4.004-bd2Pvk/blib/arch/auto/DBD/mysql/mysql.bundle’ for module DBD::mysql: dlopen(/Users/phil/.cpan/build/DBD-mysql-4.004-bd2Pvk/blib/arch/auto/DBD/mysql/mysql.bundle, 2): Library not loaded: /usr/local/mysql/lib/mysql/libmysqlclient.15.dylib Referenced from: /Users/phil/.cpan/build/DBD-mysql-4.004-bd2Pvk/blib/arch/auto/DBD/mysql/mysql.bundle Reason: image not found at /System/Library/Perl/5.8.6/darwin-thread-multi-2level/DynaLoader.pm line 230. at (eval 3) line 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I tried a million things to solve this, thinking it was some leftover residue from my previous MySQL install. Unfortunately, even after a clean reinstall of MySQL, the same error was occurring. I looked more closely at the error, hoping to divine some deeper meaning, when it hit me. I knew the library existed, but I couldn’t figure out why the perl library loader couldn’t find it. Closer examination revealed that for some reason the library path had an extra component in it. The solution was a simple symlink:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yes, ridiculous, I know. But it fixed the problem, and everything is working fine now.&lt;/p&gt;</description>
				<pubDate>Sun, 03 Jun 2007 00:00:00 -0400</pubDate>
				<link>/y29kaw5n/dw5pea==/bxlzcww=/y29tcglsaw5n/2007/06/03/64-bit-mysql-and-dbdmysql-woes</link>
				<guid isPermaLink="true">/y29kaw5n/dw5pea==/bxlzcww=/y29tcglsaw5n/2007/06/03/64-bit-mysql-and-dbdmysql-woes</guid>
			</item>
		
			<item>
				<title>Fun with Xargs on Mac OS X</title>
				<description>&lt;p&gt;&lt;em&gt;This is something I wrote over at &lt;a href='http://docforge.com'&gt;DocForge&lt;/a&gt;, but I&amp;#8217;m keeping it here for posterity. You never know what those crazy wiki-ers might do with it over there &lt;tt&gt;;-)&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I&amp;#8217;ve got a directory full of eBooks in the godawful Microsoft .lit format. I had marked with the Finder labels the ones I&amp;#8217;ve already read, and wanted to convert all the ones I hadn&amp;#8217;t read yet into a readable format.&lt;/p&gt;&lt;p&gt;After using the Spotlight UNIX tools and applying liberal amounts of command-line trickery, the end result was a rather beautiful pipeline, if I do say so myself.
&lt;!--break--&gt;
First, I used the &lt;tt&gt;mdfind&lt;/tt&gt; command to filter all the Items that had the red label. We&amp;#8217;re going to query the &lt;tt&gt;kMDItemFSLabel&lt;/tt&gt; properties; the red label has a value of &lt;tt&gt;6&lt;/tt&gt; (I found this out by using &lt;tt&gt;mdls&lt;/tt&gt; on a file with the desired label).&lt;/p&gt;&lt;p&gt;Since I only want to search a particular directory, I use the &lt;tt&gt;-onlyin&lt;/tt&gt; switch to limit the query:&lt;/p&gt;&lt;pre class='bash'&gt;mdfind -onlyin /Users/phil/Desktop/books/ &lt;span style='color: #ff0000;'&gt;&amp;quot;kMDItemFSLabel&amp;nbsp;!= 6&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;/Users/phil/Desktop/books/one.lit
/Users/phil/Desktop/books/two.lit
/Users/phil/Desktop/books/other.rtf
/Users/phil/Desktop/books/three.lit
/Users/phil/Desktop/books/something.html
...
...&lt;/pre&gt;&lt;p&gt;Some of those aren&amp;#8217;t .lit files, so I&amp;#8217;ll just use &lt;tt&gt;grep&lt;/tt&gt;:&lt;/p&gt;&lt;pre class='bash'&gt;mdfind -onlyin /Users/phil/Desktop/books/ &lt;span style='color: #ff0000;'&gt;&amp;quot;kMDItemFSLabel&amp;nbsp;!= 6&amp;quot;&lt;/span&gt; | grep &lt;span style='color: #ff0000;'&gt;&amp;quot;.lit&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;/Users/phil/Desktop/books/one.lit
/Users/phil/Desktop/books/two.lit
/Users/phil/Desktop/books/three.lit
...
...&lt;/pre&gt;&lt;p&gt;I could have limited the Spotlight query further, but what fun would that be?&lt;/p&gt;&lt;p&gt;Now, ultimately I&amp;#8217;m going to use this output with &lt;tt&gt;xargs&lt;/tt&gt;, but because of limitations imposed by the .lit conversion app, I need to get the basename of these files. For this &lt;tt&gt;sed&lt;/tt&gt; will do the trick:&lt;/p&gt;&lt;pre class='bash'&gt;mdfind -onlyin /Users/phil/Desktop/books/ &lt;span style='color: #ff0000;'&gt;&amp;quot;kMDItemFSLabel&amp;nbsp;!= 6&amp;quot;&lt;/span&gt; | grep &lt;span style='color: #ff0000;'&gt;&amp;quot;.lit&amp;quot;&lt;/span&gt; | \
    sed &lt;span style='color: #ff0000;'&gt;'s/&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;Users&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;phil&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;Desktop&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;books&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;//'&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;one.lit
two.lit
three.lit
...
...&lt;/pre&gt;&lt;p&gt;Finally, I pass this onto &lt;tt&gt;xargs&lt;/tt&gt;, then the unfortunately named &lt;a class='external text' href='http://www.convertlit.com' title='http://www.convertlit.com'&gt;ConvertLIT&lt;/a&gt; tool:&lt;/p&gt;&lt;pre class='bash'&gt;mdfind -onlyin /Users/phil/Desktop/books/ &lt;span style='color: #ff0000;'&gt;&amp;quot;kMDItemFSLabel&amp;nbsp;!= 6&amp;quot;&lt;/span&gt; | grep &lt;span style='color: #ff0000;'&gt;&amp;quot;.lit&amp;quot;&lt;/span&gt; | \
    sed &lt;span style='color: #ff0000;'&gt;'s/&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;Users&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;phil&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;Desktop&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;books&lt;span style='color: #000099; font-weight: bold;'&gt;\/&lt;/span&gt;//'&lt;/span&gt;  | xargs -I \&lt;span style='color: #66cc66;'&gt;&amp;#123;&lt;/span&gt;\&lt;span style='color: #66cc66;'&gt;&amp;#125;&lt;/span&gt; clit \&lt;span style='color: #66cc66;'&gt;&amp;#123;&lt;/span&gt;\&lt;span style='color: #66cc66;'&gt;&amp;#125;&lt;/span&gt; oebps/\&lt;span style='color: #66cc66;'&gt;&amp;#123;&lt;/span&gt;\&lt;span style='color: #66cc66;'&gt;&amp;#125;&lt;/span&gt;/&lt;/pre&gt;&lt;pre&gt;$ clit one.lit oebps/one.lit/
$ clit two.lit oebps/two.lit/
$ clit three.lit oebps/three.lit/
$ ...
$ ...&lt;/pre&gt;&lt;p&gt;I&amp;#8217;m replicating the syntax of &lt;tt&gt;find&lt;/tt&gt;&amp;#8217;s &lt;tt&gt;-exec&lt;/tt&gt; switch with &lt;tt&gt;xargs&lt;/tt&gt;&amp;#8217; &lt;tt&gt;-I&lt;/tt&gt; switch. This will replace all occurrences of the &lt;tt&gt;{}&lt;/tt&gt; with the filename from standard input.&lt;/p&gt;</description>
				<pubDate>Wed, 16 May 2007 00:00:00 -0400</pubDate>
				<link>/y29kaw5n/dw5pea==/ymfzaa==/2007/05/16/fun-with-xargs-on-mac-os-x</link>
				<guid isPermaLink="true">/y29kaw5n/dw5pea==/ymfzaa==/2007/05/16/fun-with-xargs-on-mac-os-x</guid>
			</item>
		
	</channel>
</rss>
